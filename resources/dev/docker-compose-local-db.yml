services:
  app1:
    ports:
      - "8001:8000"
    env_file:
      - ../../core/app/.env
    build:
      context: ../../core/app
      dockerfile: ./Dockerfile.dev
    develop:
      watch:
        - action: rebuild
          path: ../../core/app
    depends_on:
      db:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]  # Check root path
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  app2:
    ports:
      - "8002:8000"
    env_file:
      - ../../core/app/.env
    build:
      context: ../../core/app
      dockerfile: ./Dockerfile.dev
    develop:
      watch:
        - action: rebuild
          path: ../../core/app
    depends_on:
      db:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]  # Check root path
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
      

  app3:
    ports:
      - "8003:8000"
    env_file:
      - ../../core/app/.env
    build:
      context: ../../core/app
      dockerfile: ./Dockerfile.dev
    develop:
      watch:
        - action: rebuild
          path: ../../core/app
    depends_on:
      db:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]  # Check root path
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  haproxy:
    image: haproxy:latest
    ports:
      - "80:80"
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      - app1
      - app2
      - app3

  ui:
    ports:
      - "3000:3000"
    build:
      context: ../../ui
      dockerfile: ./Dockerfile.dev
    develop:
      watch:
        - action: rebuild
          path: ../../ui

  # nginx:
  #   image: nginx:latest
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
  #   depends_on:
  #     - ui
  #     - app

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: always
    environment:
      - REDIS_PASSWORD=12345
    command: ["redis-server", "--requirepass 12345"]
    # healthcheck:
    #   test: ["CMD-SHELL", "redis-cli -a $$REDIS_PASSWORD ping | grep pong"]
    #   interval: 5s
    #   timeout: 2s
    #   retries: 5

  db:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - ./database.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "alice@wonderland.tld"
      PGADMIN_DEFAULT_PASSWORD: "12345"
      PGADMIN_SERVER_MODE: "False"
      PGADMIN_SERVER_NAME: "Postgres"
      PGADMIN_SERVER_HOST: "db"
      PGADMIN_SERVER_PORT: "5433"
      PGADMIN_SERVER_USER: "gosty"
      PGADMIN_SERVER_PASSWORD: "my-insecure-password"
    ports:
      - "5433:5433"
    depends_on:
      - db